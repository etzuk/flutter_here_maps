// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: map_channel.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct FlutterHereMaps_MapChannelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var object: OneOf_Object? {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  ///Map actions
  var setCenter: FlutterHereMaps_MapCenter {
    get {
      if case .setCenter(let v)? = _storage._object {return v}
      return FlutterHereMaps_MapCenter()
    }
    set {_uniqueStorage()._object = .setCenter(newValue)}
  }

  var setConfiguration: FlutterHereMaps_Configuration {
    get {
      if case .setConfiguration(let v)? = _storage._object {return v}
      return FlutterHereMaps_Configuration()
    }
    set {_uniqueStorage()._object = .setConfiguration(newValue)}
  }

  var zoomTo: FlutterHereMaps_ZoomTo {
    get {
      if case .zoomTo(let v)? = _storage._object {return v}
      return FlutterHereMaps_ZoomTo()
    }
    set {_uniqueStorage()._object = .zoomTo(newValue)}
  }

  ///UIMap objects
  var setMapObject: FlutterHereMaps_MapObject {
    get {
      if case .setMapObject(let v)? = _storage._object {return v}
      return FlutterHereMaps_MapObject()
    }
    set {_uniqueStorage()._object = .setMapObject(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Object: Equatable {
    ///Map actions
    case setCenter(FlutterHereMaps_MapCenter)
    case setConfiguration(FlutterHereMaps_Configuration)
    case zoomTo(FlutterHereMaps_ZoomTo)
    ///UIMap objects
    case setMapObject(FlutterHereMaps_MapObject)

  #if !swift(>=4.1)
    static func ==(lhs: FlutterHereMaps_MapChannelRequest.OneOf_Object, rhs: FlutterHereMaps_MapChannelRequest.OneOf_Object) -> Bool {
      switch (lhs, rhs) {
      case (.setCenter(let l), .setCenter(let r)): return l == r
      case (.setConfiguration(let l), .setConfiguration(let r)): return l == r
      case (.zoomTo(let l), .zoomTo(let r)): return l == r
      case (.setMapObject(let l), .setMapObject(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FlutterHereMaps_MapChannelReplay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var object: OneOf_Object? {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  ///Map actions
  var getCenter: FlutterHereMaps_MapCenter {
    get {
      if case .getCenter(let v)? = _storage._object {return v}
      return FlutterHereMaps_MapCenter()
    }
    set {_uniqueStorage()._object = .getCenter(newValue)}
  }

  var mapGesture: FlutterHereMaps_MapGesture {
    get {
      if case .mapGesture(let v)? = _storage._object {return v}
      return FlutterHereMaps_MapGesture()
    }
    set {_uniqueStorage()._object = .mapGesture(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Object: Equatable {
    ///Map actions
    case getCenter(FlutterHereMaps_MapCenter)
    case mapGesture(FlutterHereMaps_MapGesture)

  #if !swift(>=4.1)
    static func ==(lhs: FlutterHereMaps_MapChannelReplay.OneOf_Object, rhs: FlutterHereMaps_MapChannelReplay.OneOf_Object) -> Bool {
      switch (lhs, rhs) {
      case (.getCenter(let l), .getCenter(let r)): return l == r
      case (.mapGesture(let l), .mapGesture(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FlutterHereMaps_InitMapConfigutation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var initialMapCenter: FlutterHereMaps_MapCenter {
    get {return _storage._initialMapCenter ?? FlutterHereMaps_MapCenter()}
    set {_uniqueStorage()._initialMapCenter = newValue}
  }
  /// Returns true if `initialMapCenter` has been explicitly set.
  var hasInitialMapCenter: Bool {return _storage._initialMapCenter != nil}
  /// Clears the value of `initialMapCenter`. Subsequent reads from it will return its default value.
  mutating func clearInitialMapCenter() {_uniqueStorage()._initialMapCenter = nil}

  var gestureTapEnable: Bool {
    get {return _storage._gestureTapEnable}
    set {_uniqueStorage()._gestureTapEnable = newValue}
  }

  var gestureLongPressEnable: Bool {
    get {return _storage._gestureLongPressEnable}
    set {_uniqueStorage()._gestureLongPressEnable = newValue}
  }

  var gesturePinchEnable: Bool {
    get {return _storage._gesturePinchEnable}
    set {_uniqueStorage()._gesturePinchEnable = newValue}
  }

  var gestureTwoFingerTapEnable: Bool {
    get {return _storage._gestureTwoFingerTapEnable}
    set {_uniqueStorage()._gestureTwoFingerTapEnable = newValue}
  }

  var gestureDoubleTapEnable: Bool {
    get {return _storage._gestureDoubleTapEnable}
    set {_uniqueStorage()._gestureDoubleTapEnable = newValue}
  }

  var gesturePanEnable: Bool {
    get {return _storage._gesturePanEnable}
    set {_uniqueStorage()._gesturePanEnable = newValue}
  }

  var gestureRotationEnable: Bool {
    get {return _storage._gestureRotationEnable}
    set {_uniqueStorage()._gestureRotationEnable = newValue}
  }

  var gestureTwoFingerPanEnable: Bool {
    get {return _storage._gestureTwoFingerPanEnable}
    set {_uniqueStorage()._gestureTwoFingerPanEnable = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "FlutterHereMaps"

extension FlutterHereMaps_MapChannelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MapChannelRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "setCenter"),
    2: .same(proto: "setConfiguration"),
    3: .same(proto: "zoomTo"),
    20: .same(proto: "setMapObject"),
  ]

  fileprivate class _StorageClass {
    var _object: FlutterHereMaps_MapChannelRequest.OneOf_Object?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _object = source._object
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: FlutterHereMaps_MapCenter?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .setCenter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .setCenter(v)}
        case 2:
          var v: FlutterHereMaps_Configuration?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .setConfiguration(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .setConfiguration(v)}
        case 3:
          var v: FlutterHereMaps_ZoomTo?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .zoomTo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .zoomTo(v)}
        case 20:
          var v: FlutterHereMaps_MapObject?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .setMapObject(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .setMapObject(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._object {
      case .setCenter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .setConfiguration(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .zoomTo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .setMapObject(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_MapChannelRequest, rhs: FlutterHereMaps_MapChannelRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._object != rhs_storage._object {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_MapChannelReplay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MapChannelReplay"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "getCenter"),
    2: .same(proto: "mapGesture"),
  ]

  fileprivate class _StorageClass {
    var _object: FlutterHereMaps_MapChannelReplay.OneOf_Object?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _object = source._object
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: FlutterHereMaps_MapCenter?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .getCenter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .getCenter(v)}
        case 2:
          var v: FlutterHereMaps_MapGesture?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .mapGesture(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .mapGesture(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._object {
      case .getCenter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .mapGesture(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_MapChannelReplay, rhs: FlutterHereMaps_MapChannelReplay) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._object != rhs_storage._object {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_InitMapConfigutation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InitMapConfigutation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "initialMapCenter"),
    10: .same(proto: "gestureTapEnable"),
    11: .same(proto: "gestureLongPressEnable"),
    12: .same(proto: "gesturePinchEnable"),
    13: .same(proto: "gestureTwoFingerTapEnable"),
    14: .same(proto: "gestureDoubleTapEnable"),
    15: .same(proto: "gesturePanEnable"),
    16: .same(proto: "gestureRotationEnable"),
    17: .same(proto: "gestureTwoFingerPanEnable"),
  ]

  fileprivate class _StorageClass {
    var _initialMapCenter: FlutterHereMaps_MapCenter? = nil
    var _gestureTapEnable: Bool = false
    var _gestureLongPressEnable: Bool = false
    var _gesturePinchEnable: Bool = false
    var _gestureTwoFingerTapEnable: Bool = false
    var _gestureDoubleTapEnable: Bool = false
    var _gesturePanEnable: Bool = false
    var _gestureRotationEnable: Bool = false
    var _gestureTwoFingerPanEnable: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _initialMapCenter = source._initialMapCenter
      _gestureTapEnable = source._gestureTapEnable
      _gestureLongPressEnable = source._gestureLongPressEnable
      _gesturePinchEnable = source._gesturePinchEnable
      _gestureTwoFingerTapEnable = source._gestureTwoFingerTapEnable
      _gestureDoubleTapEnable = source._gestureDoubleTapEnable
      _gesturePanEnable = source._gesturePanEnable
      _gestureRotationEnable = source._gestureRotationEnable
      _gestureTwoFingerPanEnable = source._gestureTwoFingerPanEnable
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._initialMapCenter)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._gestureTapEnable)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._gestureLongPressEnable)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._gesturePinchEnable)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._gestureTwoFingerTapEnable)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._gestureDoubleTapEnable)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._gesturePanEnable)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._gestureRotationEnable)
        case 17: try decoder.decodeSingularBoolField(value: &_storage._gestureTwoFingerPanEnable)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._initialMapCenter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._gestureTapEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gestureTapEnable, fieldNumber: 10)
      }
      if _storage._gestureLongPressEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gestureLongPressEnable, fieldNumber: 11)
      }
      if _storage._gesturePinchEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gesturePinchEnable, fieldNumber: 12)
      }
      if _storage._gestureTwoFingerTapEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gestureTwoFingerTapEnable, fieldNumber: 13)
      }
      if _storage._gestureDoubleTapEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gestureDoubleTapEnable, fieldNumber: 14)
      }
      if _storage._gesturePanEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gesturePanEnable, fieldNumber: 15)
      }
      if _storage._gestureRotationEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gestureRotationEnable, fieldNumber: 16)
      }
      if _storage._gestureTwoFingerPanEnable != false {
        try visitor.visitSingularBoolField(value: _storage._gestureTwoFingerPanEnable, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_InitMapConfigutation, rhs: FlutterHereMaps_InitMapConfigutation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._initialMapCenter != rhs_storage._initialMapCenter {return false}
        if _storage._gestureTapEnable != rhs_storage._gestureTapEnable {return false}
        if _storage._gestureLongPressEnable != rhs_storage._gestureLongPressEnable {return false}
        if _storage._gesturePinchEnable != rhs_storage._gesturePinchEnable {return false}
        if _storage._gestureTwoFingerTapEnable != rhs_storage._gestureTwoFingerTapEnable {return false}
        if _storage._gestureDoubleTapEnable != rhs_storage._gestureDoubleTapEnable {return false}
        if _storage._gesturePanEnable != rhs_storage._gesturePanEnable {return false}
        if _storage._gestureRotationEnable != rhs_storage._gestureRotationEnable {return false}
        if _storage._gestureTwoFingerPanEnable != rhs_storage._gestureTwoFingerPanEnable {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
