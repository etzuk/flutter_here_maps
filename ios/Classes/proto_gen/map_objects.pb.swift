// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: map_objects.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum FlutterHereMaps_Animation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case bow // = 0
  case linear // = 1
  case none // = 2
  case rocket // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .bow
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .bow
    case 1: self = .linear
    case 2: self = .none
    case 3: self = .rocket
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .bow: return 0
    case .linear: return 1
    case .none: return 2
    case .rocket: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension FlutterHereMaps_Animation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [FlutterHereMaps_Animation] = [
    .bow,
    .linear,
    .none,
    .rocket,
  ]
}

#endif  // swift(>=4.2)

struct FlutterHereMaps_Coordinate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lat: Double = 0

  var lng: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FlutterHereMaps_Size {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var width: Float = 0

  var height: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FlutterHereMaps_ViewRect {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Int32 = 0

  var y: Int32 = 0

  var width: Int32 = 0

  var height: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct FlutterHereMaps_MapMarker {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coordinate: FlutterHereMaps_Coordinate {
    get {return _storage._coordinate ?? FlutterHereMaps_Coordinate()}
    set {_uniqueStorage()._coordinate = newValue}
  }
  /// Returns true if `coordinate` has been explicitly set.
  var hasCoordinate: Bool {return _storage._coordinate != nil}
  /// Clears the value of `coordinate`. Subsequent reads from it will return its default value.
  mutating func clearCoordinate() {_uniqueStorage()._coordinate = nil}

  var size: FlutterHereMaps_Size {
    get {return _storage._size ?? FlutterHereMaps_Size()}
    set {_uniqueStorage()._size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {_uniqueStorage()._size = nil}

  var image: String {
    get {return _storage._image}
    set {_uniqueStorage()._image = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FlutterHereMaps_MapObject {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: String {
    get {return _storage._uniqueID}
    set {_uniqueStorage()._uniqueID = newValue}
  }

  var zIndex: Int32 {
    get {return _storage._zIndex}
    set {_uniqueStorage()._zIndex = newValue}
  }

  var visible: Bool {
    get {return _storage._visible}
    set {_uniqueStorage()._visible = newValue}
  }

  var object: OneOf_Object? {
    get {return _storage._object}
    set {_uniqueStorage()._object = newValue}
  }

  var marker: FlutterHereMaps_MapMarker {
    get {
      if case .marker(let v)? = _storage._object {return v}
      return FlutterHereMaps_MapMarker()
    }
    set {_uniqueStorage()._object = .marker(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Object: Equatable {
    case marker(FlutterHereMaps_MapMarker)

  #if !swift(>=4.1)
    static func ==(lhs: FlutterHereMaps_MapObject.OneOf_Object, rhs: FlutterHereMaps_MapObject.OneOf_Object) -> Bool {
      switch (lhs, rhs) {
      case (.marker(let l), .marker(let r)): return l == r
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FlutterHereMaps_MapCenter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coordinate: FlutterHereMaps_Coordinate {
    get {return _storage._coordinate ?? FlutterHereMaps_Coordinate()}
    set {_uniqueStorage()._coordinate = newValue}
  }
  /// Returns true if `coordinate` has been explicitly set.
  var hasCoordinate: Bool {return _storage._coordinate != nil}
  /// Clears the value of `coordinate`. Subsequent reads from it will return its default value.
  mutating func clearCoordinate() {_uniqueStorage()._coordinate = nil}

  var zoomLevel: FlutterHereMaps_FloatValue {
    get {return _storage._zoomLevel ?? FlutterHereMaps_FloatValue()}
    set {_uniqueStorage()._zoomLevel = newValue}
  }
  /// Returns true if `zoomLevel` has been explicitly set.
  var hasZoomLevel: Bool {return _storage._zoomLevel != nil}
  /// Clears the value of `zoomLevel`. Subsequent reads from it will return its default value.
  mutating func clearZoomLevel() {_uniqueStorage()._zoomLevel = nil}

  var orientation: FlutterHereMaps_FloatValue {
    get {return _storage._orientation ?? FlutterHereMaps_FloatValue()}
    set {_uniqueStorage()._orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return _storage._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {_uniqueStorage()._orientation = nil}

  var tilt: FlutterHereMaps_FloatValue {
    get {return _storage._tilt ?? FlutterHereMaps_FloatValue()}
    set {_uniqueStorage()._tilt = newValue}
  }
  /// Returns true if `tilt` has been explicitly set.
  var hasTilt: Bool {return _storage._tilt != nil}
  /// Clears the value of `tilt`. Subsequent reads from it will return its default value.
  mutating func clearTilt() {_uniqueStorage()._tilt = nil}

  var animation: FlutterHereMaps_Animation {
    get {return _storage._animation}
    set {_uniqueStorage()._animation = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FlutterHereMaps_Configuration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trafficVisible: Bool {
    get {return _storage._trafficVisible}
    set {_uniqueStorage()._trafficVisible = newValue}
  }

  var positionIndicator: FlutterHereMaps_Configuration.PositionIndicator {
    get {return _storage._positionIndicator ?? FlutterHereMaps_Configuration.PositionIndicator()}
    set {_uniqueStorage()._positionIndicator = newValue}
  }
  /// Returns true if `positionIndicator` has been explicitly set.
  var hasPositionIndicator: Bool {return _storage._positionIndicator != nil}
  /// Clears the value of `positionIndicator`. Subsequent reads from it will return its default value.
  mutating func clearPositionIndicator() {_uniqueStorage()._positionIndicator = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct PositionIndicator {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var isVisible: FlutterHereMaps_BoolValue {
      get {return _storage._isVisible ?? FlutterHereMaps_BoolValue()}
      set {_uniqueStorage()._isVisible = newValue}
    }
    /// Returns true if `isVisible` has been explicitly set.
    var hasIsVisible: Bool {return _storage._isVisible != nil}
    /// Clears the value of `isVisible`. Subsequent reads from it will return its default value.
    mutating func clearIsVisible() {_uniqueStorage()._isVisible = nil}

    var isAccuracyIndicatorVisible: FlutterHereMaps_BoolValue {
      get {return _storage._isAccuracyIndicatorVisible ?? FlutterHereMaps_BoolValue()}
      set {_uniqueStorage()._isAccuracyIndicatorVisible = newValue}
    }
    /// Returns true if `isAccuracyIndicatorVisible` has been explicitly set.
    var hasIsAccuracyIndicatorVisible: Bool {return _storage._isAccuracyIndicatorVisible != nil}
    /// Clears the value of `isAccuracyIndicatorVisible`. Subsequent reads from it will return its default value.
    mutating func clearIsAccuracyIndicatorVisible() {_uniqueStorage()._isAccuracyIndicatorVisible = nil}

    var accuracyIndicatorColor: FlutterHereMaps_FloatValue {
      get {return _storage._accuracyIndicatorColor ?? FlutterHereMaps_FloatValue()}
      set {_uniqueStorage()._accuracyIndicatorColor = newValue}
    }
    /// Returns true if `accuracyIndicatorColor` has been explicitly set.
    var hasAccuracyIndicatorColor: Bool {return _storage._accuracyIndicatorColor != nil}
    /// Clears the value of `accuracyIndicatorColor`. Subsequent reads from it will return its default value.
    mutating func clearAccuracyIndicatorColor() {_uniqueStorage()._accuracyIndicatorColor = nil}

    var hue: FlutterHereMaps_FloatValue {
      get {return _storage._hue ?? FlutterHereMaps_FloatValue()}
      set {_uniqueStorage()._hue = newValue}
    }
    /// Returns true if `hue` has been explicitly set.
    var hasHue: Bool {return _storage._hue != nil}
    /// Clears the value of `hue`. Subsequent reads from it will return its default value.
    mutating func clearHue() {_uniqueStorage()._hue = nil}

    var orientationOffset: FlutterHereMaps_FloatValue {
      get {return _storage._orientationOffset ?? FlutterHereMaps_FloatValue()}
      set {_uniqueStorage()._orientationOffset = newValue}
    }
    /// Returns true if `orientationOffset` has been explicitly set.
    var hasOrientationOffset: Bool {return _storage._orientationOffset != nil}
    /// Clears the value of `orientationOffset`. Subsequent reads from it will return its default value.
    mutating func clearOrientationOffset() {_uniqueStorage()._orientationOffset = nil}

    var tracksCourse: FlutterHereMaps_BoolValue {
      get {return _storage._tracksCourse ?? FlutterHereMaps_BoolValue()}
      set {_uniqueStorage()._tracksCourse = newValue}
    }
    /// Returns true if `tracksCourse` has been explicitly set.
    var hasTracksCourse: Bool {return _storage._tracksCourse != nil}
    /// Clears the value of `tracksCourse`. Subsequent reads from it will return its default value.
    mutating func clearTracksCourse() {_uniqueStorage()._tracksCourse = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct FlutterHereMaps_ZoomTo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var coordinates: [FlutterHereMaps_Coordinate] {
    get {return _storage._coordinates}
    set {_uniqueStorage()._coordinates = newValue}
  }

  /// Optional
  var animation: FlutterHereMaps_Animation {
    get {return _storage._animation}
    set {_uniqueStorage()._animation = newValue}
  }

  /// Optional
  var orientation: FlutterHereMaps_FloatValue {
    get {return _storage._orientation ?? FlutterHereMaps_FloatValue()}
    set {_uniqueStorage()._orientation = newValue}
  }
  /// Returns true if `orientation` has been explicitly set.
  var hasOrientation: Bool {return _storage._orientation != nil}
  /// Clears the value of `orientation`. Subsequent reads from it will return its default value.
  mutating func clearOrientation() {_uniqueStorage()._orientation = nil}

  /// Optional
  var perspective: FlutterHereMaps_FloatValue {
    get {return _storage._perspective ?? FlutterHereMaps_FloatValue()}
    set {_uniqueStorage()._perspective = newValue}
  }
  /// Returns true if `perspective` has been explicitly set.
  var hasPerspective: Bool {return _storage._perspective != nil}
  /// Clears the value of `perspective`. Subsequent reads from it will return its default value.
  mutating func clearPerspective() {_uniqueStorage()._perspective = nil}

  /// Optional
  var viewRect: FlutterHereMaps_ViewRect {
    get {return _storage._viewRect ?? FlutterHereMaps_ViewRect()}
    set {_uniqueStorage()._viewRect = newValue}
  }
  /// Returns true if `viewRect` has been explicitly set.
  var hasViewRect: Bool {return _storage._viewRect != nil}
  /// Clears the value of `viewRect`. Subsequent reads from it will return its default value.
  mutating func clearViewRect() {_uniqueStorage()._viewRect = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Wrapper message for `float`.
///
/// The JSON representation for `FloatValue` is JSON number.
struct FlutterHereMaps_FloatValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The float value.
  var value: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Wrapper message for `bool`.
///
/// The JSON representation for `BoolValue` is JSON `true` and `false`.
struct FlutterHereMaps_BoolValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The bool value.
  var value: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "FlutterHereMaps"

extension FlutterHereMaps_Animation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Bow"),
    1: .same(proto: "Linear"),
    2: .same(proto: "None"),
    3: .same(proto: "Rocket"),
  ]
}

extension FlutterHereMaps_Coordinate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Coordinate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lat"),
    2: .same(proto: "lng"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.lat)
      case 2: try decoder.decodeSingularDoubleField(value: &self.lng)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lat != 0 {
      try visitor.visitSingularDoubleField(value: self.lat, fieldNumber: 1)
    }
    if self.lng != 0 {
      try visitor.visitSingularDoubleField(value: self.lng, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_Coordinate, rhs: FlutterHereMaps_Coordinate) -> Bool {
    if lhs.lat != rhs.lat {return false}
    if lhs.lng != rhs.lng {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_Size: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Size"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "width"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.width)
      case 2: try decoder.decodeSingularFloatField(value: &self.height)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.width != 0 {
      try visitor.visitSingularFloatField(value: self.width, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularFloatField(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_Size, rhs: FlutterHereMaps_Size) -> Bool {
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_ViewRect: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ViewRect"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
    3: .same(proto: "width"),
    4: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.x)
      case 2: try decoder.decodeSingularInt32Field(value: &self.y)
      case 3: try decoder.decodeSingularInt32Field(value: &self.width)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularInt32Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularInt32Field(value: self.y, fieldNumber: 2)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_ViewRect, rhs: FlutterHereMaps_ViewRect) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.width != rhs.width {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_MapMarker: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MapMarker"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coordinate"),
    2: .same(proto: "size"),
    3: .same(proto: "image"),
  ]

  fileprivate class _StorageClass {
    var _coordinate: FlutterHereMaps_Coordinate? = nil
    var _size: FlutterHereMaps_Size? = nil
    var _image: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _coordinate = source._coordinate
      _size = source._size
      _image = source._image
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._coordinate)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._size)
        case 3: try decoder.decodeSingularStringField(value: &_storage._image)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._coordinate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._size {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._image.isEmpty {
        try visitor.visitSingularStringField(value: _storage._image, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_MapMarker, rhs: FlutterHereMaps_MapMarker) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._coordinate != rhs_storage._coordinate {return false}
        if _storage._size != rhs_storage._size {return false}
        if _storage._image != rhs_storage._image {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_MapObject: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MapObject"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uniqueId"),
    2: .same(proto: "zIndex"),
    3: .same(proto: "visible"),
    4: .same(proto: "marker"),
  ]

  fileprivate class _StorageClass {
    var _uniqueID: String = String()
    var _zIndex: Int32 = 0
    var _visible: Bool = false
    var _object: FlutterHereMaps_MapObject.OneOf_Object?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uniqueID = source._uniqueID
      _zIndex = source._zIndex
      _visible = source._visible
      _object = source._object
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uniqueID)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._zIndex)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._visible)
        case 4:
          var v: FlutterHereMaps_MapMarker?
          if let current = _storage._object {
            try decoder.handleConflictingOneOf()
            if case .marker(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._object = .marker(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uniqueID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uniqueID, fieldNumber: 1)
      }
      if _storage._zIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._zIndex, fieldNumber: 2)
      }
      if _storage._visible != false {
        try visitor.visitSingularBoolField(value: _storage._visible, fieldNumber: 3)
      }
      if case .marker(let v)? = _storage._object {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_MapObject, rhs: FlutterHereMaps_MapObject) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uniqueID != rhs_storage._uniqueID {return false}
        if _storage._zIndex != rhs_storage._zIndex {return false}
        if _storage._visible != rhs_storage._visible {return false}
        if _storage._object != rhs_storage._object {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_MapCenter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MapCenter"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Coordinate"),
    2: .same(proto: "zoomLevel"),
    3: .same(proto: "orientation"),
    4: .same(proto: "tilt"),
    5: .same(proto: "animation"),
  ]

  fileprivate class _StorageClass {
    var _coordinate: FlutterHereMaps_Coordinate? = nil
    var _zoomLevel: FlutterHereMaps_FloatValue? = nil
    var _orientation: FlutterHereMaps_FloatValue? = nil
    var _tilt: FlutterHereMaps_FloatValue? = nil
    var _animation: FlutterHereMaps_Animation = .bow

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _coordinate = source._coordinate
      _zoomLevel = source._zoomLevel
      _orientation = source._orientation
      _tilt = source._tilt
      _animation = source._animation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._coordinate)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._zoomLevel)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._orientation)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._tilt)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._animation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._coordinate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._zoomLevel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._orientation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._tilt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._animation != .bow {
        try visitor.visitSingularEnumField(value: _storage._animation, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_MapCenter, rhs: FlutterHereMaps_MapCenter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._coordinate != rhs_storage._coordinate {return false}
        if _storage._zoomLevel != rhs_storage._zoomLevel {return false}
        if _storage._orientation != rhs_storage._orientation {return false}
        if _storage._tilt != rhs_storage._tilt {return false}
        if _storage._animation != rhs_storage._animation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_Configuration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Configuration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trafficVisible"),
    2: .same(proto: "positionIndicator"),
  ]

  fileprivate class _StorageClass {
    var _trafficVisible: Bool = false
    var _positionIndicator: FlutterHereMaps_Configuration.PositionIndicator? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _trafficVisible = source._trafficVisible
      _positionIndicator = source._positionIndicator
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._trafficVisible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._positionIndicator)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._trafficVisible != false {
        try visitor.visitSingularBoolField(value: _storage._trafficVisible, fieldNumber: 1)
      }
      if let v = _storage._positionIndicator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_Configuration, rhs: FlutterHereMaps_Configuration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._trafficVisible != rhs_storage._trafficVisible {return false}
        if _storage._positionIndicator != rhs_storage._positionIndicator {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_Configuration.PositionIndicator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = FlutterHereMaps_Configuration.protoMessageName + ".PositionIndicator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "isVisible"),
    2: .same(proto: "isAccuracyIndicatorVisible"),
    3: .same(proto: "accuracyIndicatorColor"),
    4: .same(proto: "hue"),
    5: .same(proto: "orientationOffset"),
    6: .same(proto: "tracksCourse"),
  ]

  fileprivate class _StorageClass {
    var _isVisible: FlutterHereMaps_BoolValue? = nil
    var _isAccuracyIndicatorVisible: FlutterHereMaps_BoolValue? = nil
    var _accuracyIndicatorColor: FlutterHereMaps_FloatValue? = nil
    var _hue: FlutterHereMaps_FloatValue? = nil
    var _orientationOffset: FlutterHereMaps_FloatValue? = nil
    var _tracksCourse: FlutterHereMaps_BoolValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _isVisible = source._isVisible
      _isAccuracyIndicatorVisible = source._isAccuracyIndicatorVisible
      _accuracyIndicatorColor = source._accuracyIndicatorColor
      _hue = source._hue
      _orientationOffset = source._orientationOffset
      _tracksCourse = source._tracksCourse
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._isVisible)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._isAccuracyIndicatorVisible)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._accuracyIndicatorColor)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._hue)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._orientationOffset)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._tracksCourse)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._isVisible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._isAccuracyIndicatorVisible {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._accuracyIndicatorColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._hue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._orientationOffset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._tracksCourse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_Configuration.PositionIndicator, rhs: FlutterHereMaps_Configuration.PositionIndicator) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._isVisible != rhs_storage._isVisible {return false}
        if _storage._isAccuracyIndicatorVisible != rhs_storage._isAccuracyIndicatorVisible {return false}
        if _storage._accuracyIndicatorColor != rhs_storage._accuracyIndicatorColor {return false}
        if _storage._hue != rhs_storage._hue {return false}
        if _storage._orientationOffset != rhs_storage._orientationOffset {return false}
        if _storage._tracksCourse != rhs_storage._tracksCourse {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_ZoomTo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ZoomTo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "coordinates"),
    2: .same(proto: "animation"),
    3: .same(proto: "orientation"),
    4: .same(proto: "perspective"),
    5: .same(proto: "viewRect"),
  ]

  fileprivate class _StorageClass {
    var _coordinates: [FlutterHereMaps_Coordinate] = []
    var _animation: FlutterHereMaps_Animation = .bow
    var _orientation: FlutterHereMaps_FloatValue? = nil
    var _perspective: FlutterHereMaps_FloatValue? = nil
    var _viewRect: FlutterHereMaps_ViewRect? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _coordinates = source._coordinates
      _animation = source._animation
      _orientation = source._orientation
      _perspective = source._perspective
      _viewRect = source._viewRect
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._coordinates)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._animation)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._orientation)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._perspective)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._viewRect)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._coordinates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._coordinates, fieldNumber: 1)
      }
      if _storage._animation != .bow {
        try visitor.visitSingularEnumField(value: _storage._animation, fieldNumber: 2)
      }
      if let v = _storage._orientation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._perspective {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._viewRect {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_ZoomTo, rhs: FlutterHereMaps_ZoomTo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._coordinates != rhs_storage._coordinates {return false}
        if _storage._animation != rhs_storage._animation {return false}
        if _storage._orientation != rhs_storage._orientation {return false}
        if _storage._perspective != rhs_storage._perspective {return false}
        if _storage._viewRect != rhs_storage._viewRect {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_FloatValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FloatValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFloatField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_FloatValue, rhs: FlutterHereMaps_FloatValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FlutterHereMaps_BoolValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BoolValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.value != false {
      try visitor.visitSingularBoolField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FlutterHereMaps_BoolValue, rhs: FlutterHereMaps_BoolValue) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
